{"version":3,"sources":["components/utils/constants.ts","components/InputRadio/InputRadio.tsx","components/Button/Button.tsx","components/Input/Input.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["maxSizeMatrix","InputRadio","currentValue","handleChange","name","value","title","disabled","className","onChange","e","checked","type","tabIndex","Button","onClick","Input","min","max","App","useState","matrix","setMatrix","width","setWidth","height","setHeight","isMousePressed","setIsMousePressed","lifeSpeed","setLifeSpeed","lifeIsGoing","setLifeIsGoing","curInterval","useRef","handleStopGame","clearInterval","current","updataMatrix","oldMatrix","newMatrix","map","line","i","cell","j","livingNeighbors","generateNewMatrix","JSON","stringify","updateMatrixSize","Array","from","length","fill","handleOverCell","preventDefault","handleRadio","target","useEffect","setIsMousePressedTrue","setIsMousePressedFalse","document","addEventListener","removeEventListener","newCurInterval","setInterval","Math","floor","random","newWidth","parseInt","draggable","handleClickCell","onMouseOver","onTouchMove","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3184ecc7.chunk.js","sourcesContent":["export const minSizeMatrix: number = 3;\r\nexport const maxSizeMatrix: number = 50;","import React from 'react';\r\nimport './InputRadio.css';\r\n\r\ninterface InputRadioProps {\r\n  currentValue: number;\r\n  name: string;\r\n  value: number;\r\n  handleChange: Function;\r\n  title: string;\r\n  disabled: boolean;\r\n}\r\n\r\nconst InputRadio: React.FC<InputRadioProps> = ({\r\n  currentValue,\r\n  handleChange,\r\n  name,\r\n  value,\r\n  title,\r\n  disabled,\r\n}) => {\r\n  return (\r\n    <label className=\"input-radio\">\r\n      <input\r\n        disabled={disabled}\r\n        onChange={(e) => handleChange(e)}\r\n        checked={currentValue === value}\r\n        className=\"input-radio__invisible\"\r\n        type=\"radio\"\r\n        name={name}\r\n        value={value}\r\n        tabIndex={1}\r\n      />\r\n      <span className=\"input-radio__visible\"></span>\r\n      {title}\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default InputRadio;\r\n","import './Button.css';\r\n\r\ninterface InputRadioProps {\r\n  onClick: Function;\r\n  title: string;\r\n}\r\n\r\nconst Button: React.FC<InputRadioProps> = ({ onClick, title }) => {\r\n  return (\r\n    <button onClick={(e) => onClick(e)} className=\"btn\">\r\n      {title}\r\n    </button>\r\n  );\r\n};\r\nexport default Button;\r\n","import './Input.css';\r\n\r\ninterface InputRadioProps {\r\n  onChange: Function;\r\n  value: number;\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\nconst Input: React.FC<InputRadioProps> = ({ value, onChange, min, max }) => {\r\n  return (\r\n    <input\r\n      className=\"input\"\r\n      value={value}\r\n      onChange={(e) => onChange(e)}\r\n      type=\"number\"\r\n      min={min}\r\n      max={max}\r\n    />\r\n  );\r\n};\r\nexport default Input;\r\n","import React from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport { minSizeMatrix, maxSizeMatrix } from '../utils/constants';\nimport InputRadio from '../InputRadio/InputRadio';\nimport Button from '../Button/Button';\nimport Input from '../Input/Input';\nimport './App.css';\n\ntype matrix = number[][];\n\nconst App: React.FC = () => {\n  const [matrix, setMatrix] = useState<matrix>([]);\n  const [width, setWidth] = useState<number>(15);\n  const [height, setHeight] = useState<number>(15);\n  const [isMousePressed, setIsMousePressed] = useState<boolean>(false);\n  const [lifeSpeed, setLifeSpeed] = useState<number>(700);\n  const [lifeIsGoing, setLifeIsGoing] = useState<boolean>(false);\n  const curInterval = useRef<any>();\n\n  useEffect(() => {\n    updateMatrixSize();\n    function setIsMousePressedTrue() {\n      setIsMousePressed(true);\n    }\n\n    function setIsMousePressedFalse() {\n      setIsMousePressed(false);\n    }\n\n    document.addEventListener('mousedown', setIsMousePressedTrue);\n    document.addEventListener('mouseup', setIsMousePressedFalse);\n    return () => {\n      document.removeEventListener('mousedown', setIsMousePressedTrue);\n      document.removeEventListener('mouseup', setIsMousePressedFalse);\n    };\n  }, []);\n\n  function handleStartGame(): void {\n    handleStopGame();\n    setLifeIsGoing(true);\n    const newCurInterval = setInterval(updataMatrix, lifeSpeed);\n    curInterval.current = newCurInterval;\n  }\n\n  function handleStopGame(): void {\n    clearInterval(curInterval.current);\n    setLifeIsGoing(false);\n  }\n\n  function handleOneStep(): void {\n    handleStopGame();\n    updataMatrix();\n  }\n\n  function handleClearMatrix(): void {\n    handleStopGame();\n    updateMatrixSize();\n  }\n\n  function updataMatrix(): void {\n    setMatrix((oldMatrix) => {\n      const newMatrix = generateNewMatrix(oldMatrix);\n      if (JSON.stringify(oldMatrix) === JSON.stringify(newMatrix)) {\n        handleStopGame();\n      }\n      return newMatrix;\n    });\n  }\n\n  function generateNewMatrix(matrix: matrix): matrix {\n    return matrix.map((line, i) =>\n      line.map((cell, j) => {\n        let livingNeighbors: number = 0;\n        if (matrix?.[i - 1]?.[j - 1]) livingNeighbors++;\n        if (matrix?.[i - 1]?.[j]) livingNeighbors++;\n        if (matrix?.[i - 1]?.[j + 1]) livingNeighbors++;\n        if (matrix?.[i]?.[j - 1]) livingNeighbors++;\n        if (matrix?.[i]?.[j + 1]) livingNeighbors++;\n        if (matrix?.[i + 1]?.[j - 1]) livingNeighbors++;\n        if (matrix?.[i + 1]?.[j]) livingNeighbors++;\n        if (matrix?.[i + 1]?.[j + 1]) livingNeighbors++;\n        if (cell) {\n          if (livingNeighbors === 2 || livingNeighbors === 3) return 1;\n          else return 0;\n        } else {\n          if (livingNeighbors === 3) return 1;\n          else return 0;\n        }\n      })\n    );\n  }\n\n  function randomlyGenerate(): void {\n    const newMatrix: matrix = matrix.map((line) => line.map(() => getRandomCell()));\n    setMatrix(newMatrix);\n  }\n\n  function getRandomCell(): number {\n    return Math.floor(Math.random() * 2);\n  }\n\n  function updateMatrixSize(): void {\n    const newMatrix: matrix = Array.from({ length: width }, () => {\n      return new Array(height).fill(0);\n    });\n    setMatrix(newMatrix);\n  }\n\n  function handleClickCell(i: number, j: number) {\n    matrix[i][j] = matrix[i][j] === 0 ? 1 : 0;\n    setMatrix([...matrix]);\n  }\n\n  function handleOverCell(\n    e: React.MouseEvent<HTMLDivElement, MouseEvent> | React.TouchEvent<HTMLDivElement>,\n    i: number,\n    j: number\n  ) {\n    e.preventDefault();\n    if (isMousePressed) {\n      matrix[i][j] = matrix[i][j] === 0 ? 1 : 0;\n    }\n    setMatrix([...matrix]);\n  }\n\n  function changeWidth(e: React.ChangeEvent<HTMLInputElement>) {\n    let newWidth: number | string;\n    if (e.target.value === '') {\n      newWidth = minSizeMatrix;\n    } else {\n      newWidth = parseInt(e.target.value);\n      if (newWidth < minSizeMatrix) newWidth = minSizeMatrix;\n      if (newWidth > maxSizeMatrix) newWidth = maxSizeMatrix;\n    }\n    setWidth(newWidth);\n  }\n\n  function changeHeight(e: React.ChangeEvent<HTMLInputElement>) {\n    let newWidth: number | string;\n    if (e.target.value === '') {\n      newWidth = minSizeMatrix;\n    } else {\n      newWidth = parseInt(e.target.value);\n      if (newWidth < minSizeMatrix) newWidth = minSizeMatrix;\n      if (newWidth > maxSizeMatrix) newWidth = maxSizeMatrix;\n    }\n    setHeight(newWidth);\n  }\n\n  function handleRadio(e: React.ChangeEvent<HTMLInputElement>): void {\n    setLifeSpeed(+e.target.value);\n  }\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__title\">Игра \"Жизнь\"</h1>\n      <div className=\"app__btn-container\">\n        <Button onClick={handleStartGame} title=\"Старт\" />\n        <Button onClick={handleStopGame} title=\"Стоп\" />\n        <Button onClick={randomlyGenerate} title=\"Случайно\" />\n        <Button onClick={handleOneStep} title=\"Один шаг\" />\n        <Button onClick={handleClearMatrix} title=\"Отчистить\" />\n      </div>\n      <div className=\"app__size-container\">\n        <Input value={width} onChange={changeWidth} min={minSizeMatrix} max={maxSizeMatrix} />\n        <Input value={height} onChange={changeHeight} min={minSizeMatrix} max={maxSizeMatrix} />\n\n        <Button onClick={updateMatrixSize} title=\"Задать размер\" />\n      </div>\n\n      <p className=\"app__text\">Скорость</p>\n      <div className=\"app__input-container\">\n        <InputRadio\n          handleChange={handleRadio}\n          disabled={lifeIsGoing}\n          name=\"speed\"\n          value={1100}\n          currentValue={lifeSpeed}\n          title=\"медленная\"\n        />\n        <InputRadio\n          handleChange={handleRadio}\n          disabled={lifeIsGoing}\n          name=\"speed\"\n          value={700}\n          currentValue={lifeSpeed}\n          title=\"средняя\"\n        />\n        <InputRadio\n          handleChange={handleRadio}\n          disabled={lifeIsGoing}\n          name=\"speed\"\n          value={300}\n          currentValue={lifeSpeed}\n          title=\"быстрая\"\n        />\n      </div>\n      <div className=\"app__field\">\n        {matrix.map((line, i) => (\n          <div key={i} draggable={false} className=\"app__line\">\n            {line.map((cell, j) => (\n              <div\n                key={j}\n                draggable={false}\n                onClick={() => handleClickCell(i, j)}\n                onMouseOver={(e) => handleOverCell(e, i, j)}\n                onTouchMove={(e) => handleOverCell(e, i, j)}\n                className={`app__cell ${cell && 'app__cell_live'}`}\n              ></div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}